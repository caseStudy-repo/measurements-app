name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  
  BE-build-test-package:
    name: BE Build & Test & Package
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: measdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        id: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B package --file pom.xml -Dquarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/measdb
        working-directory: backend
        env:
            JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
            PATH: ${{ steps.setup-java.outputs.java-home }}/bin:${{ env.PATH }}

      - name: Upload resulting Build package
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: backend/target
  
  BE-docker-image-delivery:
    name: BE Docker Image Delivery
    runs-on: ubuntu-latest
    needs: BE-build-test-package

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: Package
          path: backend/target/

      - name: Generate image tag
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d-%H%M%S)"

      - name: Docker build
        run: docker build -t xopiie/measurements-qrks:$TAG_NAME -f ./backend/src/main/docker/Dockerfile.jvm ./backend
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Retag to latest
        run: docker tag xopiie/measurements-qrks:$TAG_NAME xopiie/measurements-qrks:latest
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Docker push
        run: docker push xopiie/measurements-qrks:$TAG_NAME && docker push xopiie/measurements-qrks:latest
        env:

  BE-deploy-on-azure:
    name: BE Deploy on Azure
    runs-on: ubuntu-latest
    needs: [BE-docker-image-delivery]

    steps:
      - name: Deploy to MS Azure
        run: echo "Deployed to MS Azure"

  FE-build:
    name: FE Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
  
      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        
      - name: Build frontend
        run: npm run build --no-progress 2>&1 >/dev/null || true # Mutes ESlint warnings
        working-directory: frontend

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/


        
  FE-deploy:
    name: FE Deployment
    runs-on: ubuntu-latest
    needs: [BE-deploy-on-azure]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --build-env REACT_APP_BACKEND_URL=${{ secrets.BACKEND_URL }}   
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}     
        working-directory: frontend/
          
  cypress:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: [BE-deploy-on-azure, FE-deploy]
    strategy:
      fail-fast: false
      matrix:
        containers: [ 1, 2 ]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: measdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
            distribution: 'adopt'
            java-version: '21'
            cache: maven
            
      - name: Start backend
        run: |
         ./mvnw quarkus:dev &
        working-directory: backend

      - name: Wait for Quarkus Server to be Ready
        run: |
         echo "Waiting for Quarkus server to start..."
         until curl --output /dev/null --head http://localhost:8280/api/v1/history; do
          printf '.'
          sleep 5
         done
         echo "Quarkus server is up and running!"

      - name: Ouput backend endpoint
        run: |
         curl http://localhost:8280/api/v1/history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
  
      - name: Install dependencies
        run: npm ci
        working-directory: frontend
        
      - name: Start frontend
        run: npm run start &
        working-directory: frontend

      - name: Wait for React Server to be Ready
        run: |
             echo "Waiting for React server to start..."
             until curl --output /dev/null --head http://localhost:3000; do
              printf '.'
              sleep 5
             done
             echo "React server is up and running!"

      - name: Cypress run
          # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v6
        with:
          # Starts web server for E2E tests
          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
          
          wait-on: 'http://localhost:3000'
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # you can also add a GitHub secret

 
